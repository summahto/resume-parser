/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package resume.parser;

import java.io.File;
import java.io.IOException;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class App {

    public static void main(String[] args) {

        ExecutorService executorService = Executors.newFixedThreadPool(10);

        Path currentDir = Paths.get(".");

        System.out.println("-----Paths------");

        // Path projectRoot = Paths.get(System.getProperty("user.dir"));
        // System.out.println(currentDir.toAbsolutePath());

        Path resumeDirectory = Paths.get(currentDir.toString(), "generatedResumes/");
        System.out.println(resumeDirectory);

        List<Callable<Boolean>> callableResumes = new ArrayList<>();

        try (DirectoryStream<Path> stream = Files.newDirectoryStream(resumeDirectory)) {

            for (Path resumePath : stream) {
                if (Files.isRegularFile(resumePath)) {
                    System.out.println("File: " + resumePath.getFileName());
                    callableResumes.add(new FileProcessor(resumePath));
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        try {
            // Invoke all tasks and wait for their completion
            List<Future<Boolean>> results = executorService.invokeAll(callableResumes);

            for (Future<Boolean> future : results) {
                future.get();
            }

        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (ExecutionException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } finally {
            // Shutdown the executor service when all tasks are done
            executorService.shutdown();
        }

    }

}
